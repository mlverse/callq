% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/queue.R
\name{task_q}
\alias{task_q}
\title{Task Queue}
\description{
A task queue implementation that allows for async programming by returning
promises when tasks are pushed.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{workers}}{list containing instances of workers objects}

\item{\code{tasks}}{a \code{\link[fastmap:fastqueue]{fastmap::fastqueue()}} containing tasks currently in the queue.
Each task is represented as a named list containing:
\itemize{
\item \code{func}: The function to be called in the background worker.
\item \code{args}: A list containing the arguments to \code{func}
\item \code{resolve} and \code{reject}: \code{\link[promises:promise]{promises::promise()}} functions to be used for
handle the promise.
\item \code{id}: Id of the task
}}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-callq_task_q-new}{\code{task_q$new()}}
\item \href{#method-callq_task_q-push}{\code{task_q$push()}}
\item \href{#method-callq_task_q-worker_map}{\code{task_q$worker_map()}}
\item \href{#method-callq_task_q-worker_exec}{\code{task_q$worker_exec()}}
\item \href{#method-callq_task_q-clone}{\code{task_q$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-callq_task_q-new"></a>}}
\if{latex}{\out{\hypertarget{method-callq_task_q-new}{}}}
\subsection{Method \code{new()}}{
Creates a new task queue
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{task_q$new(
  num_workers,
  ...,
  worker_options = NULL,
  process_tasks_delay = 0.1,
  redirect_output = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{num_workers}}{Number of workers in the queue. This is the number of R
processes that will be initialized and available to respond the queue.}

\item{\code{...}}{Currently unused. To allow future expansion.}

\item{\code{worker_options}}{Numerous options that can be passed to the \link[callr:r_session]{callr::r_session}
object. Should be created with \code{\link[callr:r_session_options]{callr::r_session_options()}}.}

\item{\code{process_tasks_delay}}{Number of seconds in the future to delay execution. There is no
guarantee that the function will be executed at the desired time, but it
should not execute earlier.}

\item{\code{redirect_output}}{Bool indicating if workers output should be redirected
to the main process. By default it's redirected. When it's \code{TRUE}, the \code{worker_options}
\code{stdout} and \code{stderr} element should be a \code{|}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-callq_task_q-push"></a>}}
\if{latex}{\out{\hypertarget{method-callq_task_q-push}{}}}
\subsection{Method \code{push()}}{
Push a new task to the queue
Returns a \code{\link[promises:promise]{promises::promise()}} that can be used in the same contexts as eg,
\code{\link[promises:future_promise]{promises::future_promise()}}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{task_q$push(func, args = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{func}}{a function object to call in one of the background workers.
See notes in \code{\link[callr:r]{callr::r()}}.}

\item{\code{args}}{arguments to pass to the function \code{func}. Must be a list.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-callq_task_q-worker_map"></a>}}
\if{latex}{\out{\hypertarget{method-callq_task_q-worker_map}{}}}
\subsection{Method \code{worker_map()}}{
Allows applying a function for every worker.
It can be useful to initialize workers, eg, add make sure some state is
initialized for each worker before start adding tasks.
Returns a list of promises. One per worker.
Tasks scheduled via \code{worker_map} take precendence over tasks added with \code{push},
but don't interrupt the evaluation of a task that is already running.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{task_q$worker_map(func, args = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{func}}{a function object to call in one of the background workers.
See notes in \code{\link[callr:r]{callr::r()}}.}

\item{\code{args}}{arguments to pass to the function \code{func}. Must be a list.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-callq_task_q-worker_exec"></a>}}
\if{latex}{\out{\hypertarget{method-callq_task_q-worker_exec}{}}}
\subsection{Method \code{worker_exec()}}{
Run a task in the worker specified with an index
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{task_q$worker_exec(index, func, args = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{integer specifying a worker index}

\item{\code{func}}{a function object to call in one of the background workers.
See notes in \code{\link[callr:r]{callr::r()}}.}

\item{\code{args}}{arguments to pass to the function \code{func}. Must be a list.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-callq_task_q-clone"></a>}}
\if{latex}{\out{\hypertarget{method-callq_task_q-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{task_q$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
